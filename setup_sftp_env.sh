#!/usr/bin/env bash
#
# Automatisation de la mise en place, des tests et du nettoyage
# d'un environnement SFTP (serveur + client) dans Docker.
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

set -euo pipefail

### Param√®tres ################################################

# R√©pertoires locaux
KEY_DIR="./ssh_keys"
SERVER_DATA_DIR="./ssh_server_data"

# Cl√© / passphrase
KEY_FILE="${KEY_DIR}/id_rsa"
KEY_PUB_FILE="${KEY_DIR}/id_rsa.pub"
KEY_PASSPHRASE="password"
KEY_COMMENT="noahheraud@test.com"

# Conteneurs
CLIENT_CONTAINER="ssh_client"
SERVER_CONTAINER="ssh_server"

# Commande docker-compose (adapter si besoin)
COMPOSE_CMD="docker-compose"

# H√¥te / port vus depuis le client
SERVER_HOSTNAME="ssh_server"
SERVER_IP="172.20.0.2"
SERVER_PORT=2222
SERVER_USER="noahheraud"

### Fonctions #################################################

prepare_environment() {
  echo "‚è≥  Pr√©paration de l'environnement local‚Ä¶"

  mkdir -p "${KEY_DIR}" "${SERVER_DATA_DIR}"

  if [[ ! -f "${KEY_FILE}" ]]; then
    ssh-keygen -t rsa -b 4096 \
      -f "${KEY_FILE}" \
      -N "${KEY_PASSPHRASE}" \
      -C "${KEY_COMMENT}"
  else
    echo "‚úÖ  La cl√© SSH existe d√©j√† (${KEY_FILE}) ‚Äì √©tape ignor√©e."
  fi

  cp "${KEY_PUB_FILE}" "${SERVER_DATA_DIR}/ssh_pubkey"

  chmod 600 "${KEY_FILE}"
  chmod 644 "${KEY_PUB_FILE}" "${SERVER_DATA_DIR}/ssh_pubkey"

  echo "‚úÖ  Pr√©paration termin√©e."
}

start_containers() {
  echo "‚è≥  D√©marrage des conteneurs Docker‚Ä¶"
  ${COMPOSE_CMD} up -d
  docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
  echo "‚úÖ  Conteneurs lanc√©s."
}

configure_client() {
  echo "‚è≥  Configuration du conteneur client‚Ä¶"

  docker exec "${CLIENT_CONTAINER}" bash -c "
    set -e
    apt-get update -qq && apt-get install -y -qq openssh-client sshpass python3-pip
    pip install --quiet paramiko

    mkdir -p /root/.ssh
    cp /tmp/ssh_keys/id_rsa /root/.ssh/id_rsa
    cp /tmp/ssh_keys/id_rsa.pub /root/.ssh/id_rsa.pub
    chmod 600 /root/.ssh/id_rsa
    chmod 644 /root/.ssh/id_rsa.pub

    grep -q '${SERVER_HOSTNAME}' /etc/hosts || \
      echo '${SERVER_IP} ${SERVER_HOSTNAME}' >> /etc/hosts
  "
  echo "‚úÖ  Client configur√©."
}

test_connection() {
  echo "‚è≥  Test de la connexion SSH (passphrase envoy√©e automatiquement)‚Ä¶"

  docker exec "${CLIENT_CONTAINER}" bash -c "
    sshpass -P passphrase -p '${KEY_PASSPHRASE}' \
      ssh -o StrictHostKeyChecking=no \
          -i /root/.ssh/id_rsa \
          ${SERVER_USER}@${SERVER_HOSTNAME} -p ${SERVER_PORT} 'echo Connexion r√©ussie && exit'
  "
  echo "‚úÖ  Connexion test√©e avec succ√®s."
}

run_transfer_script() {
  echo "‚è≥  Ex√©cution du script Python de transfert‚Ä¶"
  docker exec "${CLIENT_CONTAINER}" bash -c "
    cd /app && python paraminko_transfert_docker.py
  "
  echo "‚úÖ  Script de transfert termin√©."
}

decrypt_step() {
  echo "‚è≥  R√©cup√©ration puis d√©chiffrement du PDF‚Ä¶"
  python3 Transfert/retrieve_enc_from_docker.py
  python3 Transfert/decrypt_retrieved_pdf.py
  echo "‚úÖ  PDF d√©chiffr√©."
}

cleanup_all() {
  echo "üßπ  Nettoyage complet (conteneurs + fichiers)‚Ä¶"
  ${COMPOSE_CMD} down
  rm -rf "${KEY_DIR}" "${SERVER_DATA_DIR}"
  echo "‚úÖ  Nettoyage termin√©."
}

### Dispatcher ###############################################

usage() {
  cat <<EOF
Usage: $0 {prepare|start|configure|test|transfer|decrypt|cleanup|nocleanup|all}

  prepare    : g√©n√®re les cl√©s et pr√©pare les r√©pertoires locaux
  start      : lance docker-compose
  configure  : installe et configure le client SSH
  test       : v√©rifie la connexion SSH
  transfer   : ex√©cute le script Python de transfert
  decrypt    : r√©cup√®re et d√©chiffre le PDF
  cleanup    : arr√™te et supprime les conteneurs + donn√©es temporaires
  nocleanup  : ex√©cute les √©tapes 1 √† 5 (prepare ‚Üí transfer) sans nettoyage
  all        : ex√©cute toutes les √©tapes dans l'ordre (prepare ‚Üí decrypt)
EOF
  exit 1
}

main() {
  [[ $# -eq 1 ]] || usage
  case "$1" in
    prepare)   prepare_environment ;;
    start)     start_containers ;;
    configure) configure_client ;;
    test)      test_connection ;;
    transfer)  run_transfer_script ;;
    decrypt)   decrypt_step ;;
    cleanup)   cleanup_all ;;
    nocleanup)
      prepare_environment
      start_containers
      configure_client
      test_connection
      ;;
    all)
      prepare_environment
      start_containers
      configure_client
      test_connection
      run_transfer_script
      decrypt_step
      ;;
    *) usage ;;
  esac
}

main "$@" 